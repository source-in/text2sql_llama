{"output": "SELECT count(*) FROM singer;", "query": "How many singers do we have?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT count(*) FROM singer;", "query": "What is the total number of singers?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;", "query": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;", "query": "What are the names, countries, and ages for every singer in descending order of age?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France';", "query": "What is the average, minimum, and maximum age of all singers from France?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France';", "query": "What is the average, minimum, and maximum age for all French singers?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;", "query": "Show the name and the release year of the song by the youngest singer.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;", "query": "What are the names and release years for all the songs of the youngest singer?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT DISTINCT country FROM singer WHERE age  >  20;", "query": "What are all distinct countries where singers above age 20 are from?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT DISTINCT country FROM singer WHERE age  >  20;", "query": "What are  the different countries with singers above age 20?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT country ,  count(*) FROM singer GROUP BY country;", "query": "Show all countries and the number of singers in each country.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT country ,  count(*) FROM singer GROUP BY country;", "query": "How many singers are from each country?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);", "query": "List all song names by singers above the average age.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);", "query": "What are all the song names by singers who are older than average?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;", "query": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;", "query": "What are the locations and names of all stations with capacity between 5000 and 10000?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "select max(capacity), average from stadium;", "query": "What is the maximum capacity and the average of all stadiums?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "select avg(capacity) ,  max(capacity) from stadium;", "query": "What is the average and maximum capacities for all stadiums?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;", "query": "What is the name and capacity for the stadium with highest average attendance?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;", "query": "What is the name and capacity for the stadium with the highest average attendance?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;", "query": "How many concerts are there in year 2014 or 2015?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;", "query": "How many concerts occurred in 2014 or 2015?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;", "query": "Show the stadium name and the number of concerts in each stadium.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;", "query": "For each stadium, how many concerts play there?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1;", "query": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1;", "query": "What is the name and capacity of the stadium with the most concerts after 2013?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "query": "Which year has most number of concerts?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "query": "What is the year that had the most concerts?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);", "query": "Show the stadium names without any concert.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);", "query": "What are the names of the stadiums without any concerts?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30;", "query": "Show countries where a singer above age 40 and a singer below 30 are from.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;", "query": "Show names for all stadiums except for stadiums having a concert in year 2014.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;", "query": "What are the names of all stadiums that did not have a concert in 2014?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id;", "query": "Show the name and theme for all concerts and the number of singers in each concert.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id;", "query": "What are the names , themes , and number of singers for every concert?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;", "query": "List singer names and number of concerts for each singer.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;", "query": "What are the names of the singers and number of concerts for each person?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;", "query": "List all singer names in concerts in year 2014.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;", "query": "What are the names of the singers who performed in a concert in 2014?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%';", "query": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%';", "query": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;", "query": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;", "query": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);", "query": "Find the number of concerts happened in the stadium with the highest capacity .", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);", "query": "What are the number of concerts that occurred in the stadium with the largest capacity?", "schema": "CREATE TABLE stadium (Stadium_ID INT, Location TEXT, Name TEXT, Capacity INT, Highest INT, Lowest INT, Average INT);\nCREATE TABLE singer (Singer_ID INT, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INT, Is_male bool);\nCREATE TABLE concert (concert_ID INT, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT);\nCREATE TABLE singer_in_concert (concert_ID INT, Singer_ID TEXT);\n"}
{"output": "SELECT count(*) FROM pets WHERE weight  >  10;", "query": "Find the number of pets whose weight is heavier than 10.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(*) FROM pets WHERE weight  >  10;", "query": "How many pets have a greater weight than 10?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;", "query": "Find the weight of the youngest dog.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;", "query": "How much does the youngest dog weigh?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;", "query": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;", "query": "List the maximum weight and type for each type of pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;", "query": "Find number of pets owned by students who are older than 20.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;", "query": "How many pets are owned by students that have an age greater than 20?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog';", "query": "Find the number of dog pets that are raised by female students (with sex F).", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog';", "query": "How many dog pets are raised by female students?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(DISTINCT pettype) FROM pets;", "query": "Find the number of distinct type of pets.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(DISTINCT pettype) FROM pets;", "query": "How many different types of pet are there?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog';", "query": "Find the first name of students who have cat or dog pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog';", "query": "What are the first names of every student who has a cat or dog as a pet?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog';", "query": "Find the first name of students who have both cat and dog pets .", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog';", "query": "What are the students' first names who have both cats and dogs as pets?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "query": "Find the major and age of students who do not have a cat pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "query": "What major is every student who does not own a cat as a pet, and also how old are they?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat';", "query": "Find the id of students who do not have a cat pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat';", "query": "What are the ids of the students who do not own cats as pets?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "query": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "query": "What is the first name of every student who has a dog but does not have a cat?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;", "query": "Find the type and weight of the youngest pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;", "query": "What type of pet is the youngest animal, and how much does it weigh?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;", "query": "Find the id and weight of all pets whose age is older than 1.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;", "query": "What is the id and weight of every pet who is older than 1?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;", "query": "Find the average and maximum age for each type of pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;", "query": "What is the average and maximum age for each pet type?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;", "query": "Find the average weight for each pet type.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;", "query": "What is the average weight for each type of pet?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;", "query": "Find the first name and age of students who have a pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;", "query": "What are the different first names and ages of the students who do have pets?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith';", "query": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith';", "query": "What is the id of the pet owned by the student whose last name is 'Smith'?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid;", "query": "Find the number of pets for each student who has any pet and student id.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid;", "query": "For students who have pets , how many pets does each student have? list their ids instead of names .", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;", "query": "Find the first name and gender of student who have more than one pet.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;", "query": "What is the first name and gender of the all the students who have more than one pet?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat';", "query": "Find the last name of the student who has a cat that is age 3.", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat';", "query": "What is the last name of the student who has a cat that is 3 years old?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "select avg(age) from student where stuid not in (select stuid from has_pet);", "query": "Find the average age of students who do not have any pet .", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "select avg(age) from student where stuid not in (select stuid from has_pet);", "query": "What is the average age for all students who do not own any pets?", "schema": "CREATE TABLE Student (StuID INT, LName TEXT, Fname TEXT, Age INT, Sex TEXT, Major INT, Advisor INT, city_code TEXT);\nCREATE TABLE Has_Pet (StuID INT, PetID INT);\nCREATE TABLE Pets (PetID INT, PetType TEXT, pet_age INT, weight INT);\n"}
{"output": "SELECT count(*) FROM CONTINENTS;", "query": "How many continents are there?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CONTINENTS;", "query": "What is the number of continents?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "query": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "query": "For each continent, list its id, name, and how many countries it has?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM COUNTRIES;", "query": "How many countries are listed?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM COUNTRIES;", "query": "How many countries exist?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "query": "How many models does each car maker produce? List maker full name, id and the number.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "query": "What is the full name of each car maker, along with its id and how many models it produces?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "query": "Which model of the car has the minimum horsepower?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "query": "What is the model of the car with the smallest amount of horsepower?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);", "query": "Find the model of the car whose weight is below the average weight.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);", "query": "What is the model for the car with a weight smaller than the average?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "query": "Find the name of the makers that produced some cars in the year of 1970?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "query": "What is the name of the different car makers who produced a car in 1970?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query": "Find the make and production time of the cars that were produced in the earliest year?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "query": "What is the maker of the carr produced in the earliest year and what year was it?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "query": "Which distinct car models are the produced after 1980?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "query": "What are the different models for the cards produced after 1980?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "query": "How many car makers are there in each continents? List the continent name and the count.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "query": "What is the name of each continent and how many car makers are there in each one?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "query": "Which of the countries has the most car makers? List the country name.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "query": "What is the name of the country with the most car makers?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "query": "How many car models are produced by each maker? Only list the count and the maker full name .", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "query": "What is the accelerate of the car make amc hornet sportabout (sw)?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "query": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "query": "How many car makers are there in france?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "query": "What is the number of makers of care in France?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "query": "How many car models are produced in the usa?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "query": "What is the count of the car models produced in the United States?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "query": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "query": "What is the average miles per gallon of all the cards with 4 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;", "query": "What is the smallest weight of the car produced with 8 cylinders on 1974?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;", "query": "What is the minimum weight of the car with 8 cylinders produced in 1974?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT Maker ,  Model FROM MODEL_LIST;", "query": "What are all the makers and models?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT Maker ,  Model FROM MODEL_LIST;", "query": "What are the makers and models?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "query": "What are the countries having at least one car maker? List name and id.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "query": "What are the names and ids of all countries with at least one car maker?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "query": "What is the number of the cars with horsepower more than 150?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "query": "What is the number of cars with a horsepower greater than 150?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "query": "What is the average weight of cars each year?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "query": "What is the average weight and year for each year?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "query": "Which countries in europe have at least 3 car manufacturers?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "query": "What are the names of all European countries with at least 3 manufacturers?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "query": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "query": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "query": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "query": "What is the car model with the highest mpg?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "query": "What is the average horsepower of the cars before 1980?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select avg(horsepower) from cars_data where year  <  1980;", "query": "What is the average horsepower for all cars produced before 1980?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "query": "What is the average edispl of the cars of model volvo?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "query": "What is the average edispl for all volvos?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "query": "What is the maximum accelerate for different number of cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "query": "What is the maximum accelerate for all the different cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "query": "Which model has the most version(make) of cars?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "query": "What model has the most different versions?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "query": "How many cars have more than 4 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "query": "What is the number of cars with more than 4 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "query": "how many cars were produced in 1980?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "query": "In 1980, how many cars were made?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "query": "How many car models were produced by the maker with full name American Motor Company?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "query": "What is the number of car models created by the car maker American Motor Company?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "query": "Which makers designed more than 3 car models? List full name and the id.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "query": "What are the names and ids of all makers with more than 3 models?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "query": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "query": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select distinct year from cars_data where weight between 3000 and 4000;", "query": "In which years cars were produced weighing no less than 3000 and no more than 4000?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select distinct year from cars_data where weight between 3000 and 4000;", "query": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "query": "What is the horsepower of the car with the largest accelerate?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "query": "What is the horsepower of the car with the greatest accelerate?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query": "For model volvo, how many cylinders does the car with the least accelerate have?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "query": "For a volvo model, how many cylinders does the version with least accelerate have?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "query": "How many cars have a larger accelerate than the car with the largest horsepower?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "query": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;", "query": "How many countries has more than 2 car makers?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;", "query": "What is the number of countries with more than 2 car makers?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "query": "How many cars has over 6 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "query": "What is the number of carsw ith over 6 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "query": "For the cars with 4 cylinders, which model has the largest horsepower?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "query": "For all of the 4 cylinder cars, which model has the most horsepower?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "query": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "query": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;", "query": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;", "query": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "query": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "query": "What are the name of the countries where there is not a single car maker?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "query": "What are the names of the countries with no car makers?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "query": "Which are the car makers which produce at least 2 models and more than 3 car makers? List the id and the maker .", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "query": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "query": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "query": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model?", "schema": "CREATE TABLE continents (ContId INT, Continent TEXT);\nCREATE TABLE countries (CountryId INT, CountryName TEXT, Continent INT);\nCREATE TABLE car_makers (Id INT, Maker TEXT, FullName TEXT, Country TEXT);\nCREATE TABLE model_list (ModelId INT, Maker INT, Model TEXT);\nCREATE TABLE car_names (MakeId INT, Model TEXT, Make TEXT);\nCREATE TABLE cars_data (Id INT, MPG TEXT, Cylinders INT, Edispl INT, Horsepower TEXT, Weight INT, Accelerate INT, Year INT);\n"}
{"output": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "query": "Which country does Airline \"JetBlue Airways\" belong to?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "query": "What country is Jetblue Airways affiliated with?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "query": "What is the abbreviation of Airline \"JetBlue Airways\"?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "query": "Which abbreviation corresponds to Jetblue Airways?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\";", "query": "List all airline names and their abbreviations in \"USA\".", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\";", "query": "What are the airline names and abbreviations for airlines in the USA?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\";", "query": "List the airport code and name in the city of Anthony.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\";", "query": "Give the airport code and airport name corresonding to the city Anthony.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES;", "query": "How many airlines do we have?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES;", "query": "What is the total number of airlines?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRPORTS;", "query": "How many airports do we have?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRPORTS;", "query": "Return the number of  airports.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS;", "query": "How many flights do we have?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS;", "query": "Return the number of flights.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";", "query": "Which airline has abbreviation 'UAL'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";", "query": "Give the airline with abbreviation 'UAL'.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\";", "query": "How many airlines are from USA?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\";", "query": "Return the number of airlines in the USA.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\";", "query": "Which city and country is the Alton airport at?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\";", "query": "Give the city and country for the Alton airport.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\";", "query": "What is the airport name for airport 'AKO'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\";", "query": "Return the name of the airport with code 'AKO'.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";", "query": "What are airport names at City 'Aberdeen'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";", "query": "What are the names of airports in Aberdeen?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "query": "How many flights depart from 'APG'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "query": "Count the number of flights departing from 'APG'.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";", "query": "How many flights have destination ATO?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";", "query": "Count the number of flights into ATO.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "How many flights depart from City Aberdeen?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "Return the number of flights departing from Aberdeen.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "How many flights arriving in Aberdeen city?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "Return the number of flights arriving in Aberdeen.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\";", "query": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\";", "query": "How many flights fly from Aberdeen to Ashley?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\";", "query": "How many flights does airline 'JetBlue Airways' have?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\";", "query": "Give the number of Jetblue Airways flights.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\";", "query": "How many 'United Airlines' flights go to Airport 'ASY'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\";", "query": "Count the number of United Airlines flights arriving in ASY Airport.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\";", "query": "How many 'United Airlines' flights depart from Airport 'AHD'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\";", "query": "Return the number of United Airlines flights leaving from AHD Airport.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\";", "query": "How many United Airlines flights go to City 'Aberdeen'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\";", "query": "Count the number of United Airlines flights that arrive in Aberdeen.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "query": "Which city has most number of arriving flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "query": "Which city has the most frequent destination airport?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "query": "Which city has most number of departing flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "query": "Which city is the most frequent source airport?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;", "query": "What is the code of airport that has the highest number of flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;", "query": "What is the airport code of the airport with the most flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;", "query": "What is the code of airport that has fewest number of flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;", "query": "Give the code of the airport with the least flights.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;", "query": "Which airline has most number of flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;", "query": "What airline serves the most flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;", "query": "Find the abbreviation and country of the airline that has fewest number of flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;", "query": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";", "query": "What are airlines that have some flight departing from airport 'AHD'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";", "query": "Which airlines have a flight with source airport AHD?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";", "query": "What are airlines that have flights arriving at airport 'AHD'?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";", "query": "Which airlines have a flight with destination airport AHD?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";", "query": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";", "query": "Which airlines have departing flights from both APG and CVO airports?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";", "query": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";", "query": "Which airlines have departures from CVO but not from APG airports?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;", "query": "Find all airlines that have at least 10 flights.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;", "query": "Which airlines have at least 10 flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;", "query": "Find all airlines that have fewer than 200 flights.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;", "query": "Which airlines have less than 200 flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\";", "query": "What are flight numbers of Airline \"United Airlines\"?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\";", "query": "Which flight numbers correspond to United Airlines flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "query": "What are flight numbers of flights departing from Airport \"APG\"?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "query": "Give the flight numbers of flights leaving from APG.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";", "query": "What are flight numbers of flights arriving at Airport \"APG\"?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";", "query": "Give the flight numbers of flights landing at APG.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "What are flight numbers of flights departing from City \"Aberdeen \"?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "Give the flight numbers of flights leaving from Aberdeen.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "query": "Give the flight numbers of flights arriving in Aberdeen.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\";", "query": "Find the number of flights landing in the city of Aberdeen or Abilene.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\";", "query": "How many flights land in Aberdeen or Abilene?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);", "query": "Find the name of airports which do not have any flight in and out.", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);", "query": "Which airports do not have departing or arriving flights?", "schema": "CREATE TABLE airlines (uid INT, Airline TEXT, Abbreviation TEXT, Country TEXT);\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT);\nCREATE TABLE flights (Airline INT, FlightNo INT, SourceAirport TEXT, DestAirport TEXT);\n"}
{"output": "SELECT count(*) FROM employee;", "query": "How many employees are there?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) FROM employee;", "query": "Count the number of employees", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM employee ORDER BY age;", "query": "Sort employee names by their age in ascending order.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM employee ORDER BY age;", "query": "List the names of employees and sort in ascending order of age.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) ,  city FROM employee GROUP BY city;", "query": "What is the number of employees from each city?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) ,  city FROM employee GROUP BY city;", "query": "Count the number of employees for each city.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;", "query": "Which cities do more than one employee under age 30 come from?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;", "query": "Find the cities that have more than one employee under age 30.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;", "query": "Find the number of shops in each location.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;", "query": "How many shops are there in each location?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;", "query": "Find the manager name and district of the shop whose number of products is the largest.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;", "query": "What are the manager name and district of the shop that sells the largest number of products?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT min(Number_products) ,  max(Number_products) FROM shop;", "query": "find the minimum and maximum number of products of all stores.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT min(Number_products) ,  max(Number_products) FROM shop;", "query": "What are the minimum and maximum number of products across all the shops?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;", "query": "Return the name, location and district of all shops in descending order of number of products.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;", "query": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);", "query": "Find the names of stores whose number products is more than the average number of products.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);", "query": "Which shops' number products is above the average? Give me the shop names.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;", "query": "find the name of employee who was awarded the most times in the evaluation.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;", "query": "Which employee received the most awards in evaluations? Give me the employee name.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;", "query": "Find the name of the employee who got the highest one time bonus.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;", "query": "Which employee received the biggest bonus? Give me the employee name.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "query": "Find the names of employees who never won any award in the evaluation.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "query": "What are the names of the employees who never received any evaluation?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the name of the shop that is hiring the largest number of employees?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;", "query": "Which shop has the most employees? Give me the shop name.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);", "query": "Find the name of the shops that do not hire any employee.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);", "query": "Which shops run with no employees? Find the shop names", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;", "query": "Find the number of employees hired in each shop; show the shop name as well.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;", "query": "For each shop, return the number of employees working there and the name of the shop.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT sum(bonus) FROM evaluation;", "query": "What is total bonus given in all evaluations?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT sum(bonus) FROM evaluation;", "query": "Find the total amount of bonus given in all the evaluations.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT * FROM hiring;", "query": "Give me all the information about hiring.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT * FROM hiring;", "query": "What is all the information about hiring?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;", "query": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;", "query": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(DISTINCT LOCATION) FROM shop;", "query": "How many different store locations are there?", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(DISTINCT LOCATION) FROM shop;", "query": "Count the number of distinct store locations.", "schema": "CREATE TABLE employee (Employee_ID INT, Name TEXT, Age INT, City TEXT);\nCREATE TABLE shop (Shop_ID INT, Name TEXT, Location TEXT, District TEXT, Number_products INT, Manager_name TEXT);\nCREATE TABLE hiring (Shop_ID INT, Employee_ID INT, Start_from TEXT, Is_full_time bool);\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INT);\n"}
{"output": "SELECT count(*) FROM Documents;", "query": "How many documents do we have?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Documents;", "query": "Count the number of documents.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id ,  document_name ,  document_description FROM Documents;", "query": "List document IDs, document names, and document descriptions for all documents.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id ,  document_name ,  document_description FROM Documents;", "query": "What are the ids, names, and descriptions for all documents?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\";", "query": "What is the document name and template id for document with description with the letter 'w' in it?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\";", "query": "Return the names and template ids for documents that contain the letter w in their description.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\";", "query": "What is the document id, template id and description for document named \"Robbin CV\"?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\";", "query": "Return the document id, template id, and description for the document with the name Robbin CV.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(DISTINCT template_id) FROM Documents;", "query": "How many different templates do all document use?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(DISTINCT template_id) FROM Documents;", "query": "Count the number of different templates used for documents.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';", "query": "How many documents are using the template with type code 'PPT'?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';", "query": "Count the number of documents that use the PPT template type.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;", "query": "Show all template ids and number of documents using each template.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;", "query": "What are all different template ids used for documents, and how many times were each of them used?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the id and type code for the template used by the most documents?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;", "query": "Return the id and type code of the template that is used for the greatest number of documents.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;", "query": "Show ids for all templates that are used by more than one document.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;", "query": "What are the template ids of any templates used in more than a single document?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;", "query": "Show ids for all templates not used by any document.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;", "query": "What are the ids for templates that are not used in any documents?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Templates;", "query": "How many templates do we have?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Templates;", "query": "Count the number of templates.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;", "query": "Show template ids, version numbers, and template type codes for all templates.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;", "query": "What are the ids, version numbers, and type codes for each template?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT DISTINCT template_type_code FROM Templates;", "query": "Show all distinct template type codes for all templates.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT DISTINCT template_type_code FROM Templates;", "query": "What are the different template type codes?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";", "query": "What are the ids of templates with template type code PP or PPT?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";", "query": "Return the ids of templates that have the code PP or PPT.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";", "query": "How many templates have template type code CV?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";", "query": "Count the number of templates of the type CV.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;", "query": "What is the version number and template type code for the template with version number later than 5?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;", "query": "Return the version numbers and template type codes of templates with a version number greater than 5.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;", "query": "Show all template type codes and number of templates for each.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;", "query": "What are the different template type codes, and how many templates correspond to each?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;", "query": "Which template type code has most number of templates?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;", "query": "Return the type code of the template type that the most templates belong to.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;", "query": "Show all template type codes with less than three templates.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;", "query": "What are the codes of template types that have fewer than 3 templates?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT min(Version_Number) ,  template_type_code FROM Templates;", "query": "What the smallest version number and its template type code?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT min(Version_Number) ,  template_type_code FROM Templates;", "query": "Return the lowest version number, along with its corresponding template type code.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\";", "query": "What is the template type code of the template used by document with the name \"Data base\"?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\";", "query": "Return the template type code of the template that is used by a document named Data base.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";", "query": "Show all document names using templates with template type code BK.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";", "query": "What are the names of documents that use templates with the code BK?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;", "query": "Show all template type codes and the number of documents using each type.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;", "query": "What are the different template type codes, and how many documents use each type?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;", "query": "Which template type code is used by most number of documents?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;", "query": "Return the code of the template type that is most commonly used in documents.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;", "query": "Show all template type codes that are not used by any document.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;", "query": "What are the codes of template types that are not used for any document?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;", "query": "Show all template type codes and descriptions.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;", "query": "What are the type codes and descriptions for all template types?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";", "query": "What is the template type descriptions for template type code \"AD\".", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";", "query": "Return the template type description of the template type with the code AD.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\";", "query": "What is the template type code for template type description \"Book\".", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\";", "query": "Return the type code of the template type with the description \"Book\".", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;", "query": "What are the distinct template type descriptions for the templates ever used by any document?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;", "query": "Return the different descriptions for templates that have been used in a document.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\";", "query": "What are the template ids with template type description \"Presentation\".", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\";", "query": "Return the ids corresponding to templates with the description 'Presentation'.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Paragraphs;", "query": "How many paragraphs in total?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Paragraphs;", "query": "Count the number of paragraphs.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show';", "query": "How many paragraphs for the document with name 'Summer Show'?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show';", "query": "Count the number of paragraphs in the document named 'Summer Show'.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "select other_details from paragraphs where paragraph_text like 'korea';", "query": "Show paragraph details for paragraph with text 'Korea ' .", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "select other_details from paragraphs where paragraph_text like 'korea';", "query": "What are the details for the paragraph that includes the text 'Korea '?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY';", "query": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY';", "query": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\";", "query": "Show all paragraph texts for the document \"Customer reviews\".", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\";", "query": "What are the paragraph texts for the document with the name 'Customer reviews'?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;", "query": "Show all document ids and the number of paragraphs in each document. Order by document id.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;", "query": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;", "query": "Show all document ids, names and the number of paragraphs in each document.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;", "query": "What are the ids and names of each document, as well as the number of paragraphs in each?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;", "query": "List all document ids with at least two paragraphs.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;", "query": "What are the ids of documents that have 2 or more paragraphs?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the document id and name with greatest number of paragraphs?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;", "query": "Return the id and name of the document with the most paragraphs.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;", "query": "What is the document id with least number of paragraphs?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;", "query": "Return the id of the document with the fewest paragraphs.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;", "query": "What is the document id with 1 to 2 paragraphs?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;", "query": "Give the ids of documents that have between one and two paragraphs.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';", "query": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';", "query": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "schema": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT);\nCREATE TABLE Templates (Template_ID INT, Version_Number INT, Template_Type_Code TEXT, Date_Effective_From TEXT, Date_Effective_To TEXT, Template_Details TEXT);\nCREATE TABLE Documents (Document_ID INT, Template_ID INT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT);\nCREATE TABLE Paragraphs (Paragraph_ID INT, Document_ID INT, Paragraph_Text TEXT, Other_Details TEXT);\n"}
{"output": "SELECT count(*) FROM teacher;", "query": "How many teachers are there?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT count(*) FROM teacher;", "query": "What is the total count of teachers?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Name FROM teacher ORDER BY Age ASC;", "query": "List the names of teachers in ascending order of age.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Name FROM teacher ORDER BY Age ASC;", "query": "What are the names of the teachers ordered by ascending age?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Age ,  Hometown FROM teacher;", "query": "What are the age and hometown of teachers?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Age ,  Hometown FROM teacher;", "query": "What is the age and hometown of every teacher?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "select name from teacher where hometown != \"little lever urban district\";", "query": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "select name from teacher where hometown != \"little lever urban district\";", "query": "What are the names of the teachers whose hometown is not `` Little Lever Urban District ''?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;", "query": "Show the name of teachers aged either 32 or 33?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;", "query": "What are the names of the teachers who are aged either 32 or 33?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;", "query": "What is the hometown of the youngest teacher?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;", "query": "Where is the youngest teacher from?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;", "query": "Show different hometown of teachers and the number of teachers from each hometown.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;", "query": "For each hometown, how many teachers are there?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;", "query": "List the most common hometown of teachers.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;", "query": "What is the most commmon hometowns for teachers?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;", "query": "Show the hometowns shared by at least two teachers.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;", "query": "What are the towns from which at least two teachers come from?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;", "query": "Show names of teachers and the courses they are arranged to teach.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;", "query": "What is the name of each teacher and what course they teach?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;", "query": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;", "query": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\";", "query": "Show the name of the teacher for the math course.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\";", "query": "What are the names of the people who teach math courses?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;", "query": "Show names of teachers and the number of courses they teach.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;", "query": "What are the names of the teachers and how many courses do they teach?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;", "query": "Show names of teachers that teach at least two courses.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;", "query": "What are the names of the teachers who teach at least two courses?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);", "query": "List the names of teachers who have not been arranged to teach courses.", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);", "query": "What are the names of the teachers whose courses have not been arranged?", "schema": "CREATE TABLE course (Course_ID INT, Staring_Date TEXT, Course TEXT);\nCREATE TABLE teacher (Teacher_ID INT, Name TEXT, Age TEXT, Hometown TEXT);\nCREATE TABLE course_arrange (Course_ID INT, Teacher_ID INT, Grade INT);\n"}
{"output": "SELECT count(*) FROM visitor WHERE age  <  30;", "query": "How many visitors below age 30 are there?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC;", "query": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4;", "query": "What is the average age of the visitors whose membership level is not higher than 4?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC;", "query": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1;", "query": "Find the id and name of the museum that has the most staff members?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;", "query": "Find the average number of staff working for the museums that were open before 2009.", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum';", "query": "What are the opening year and staff number of the museum named Plaza Museum?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010);", "query": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1;", "query": "find the id, name and age for visitors who visited some museums more than once.", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1;", "query": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1;", "query": "What are the id and name of the museum visited most times?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit);", "query": "What is the name of the museum that had no visitor yet?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1;", "query": "Find the name and age of the visitor who bought the most tickets at once.", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit;", "query": "What are the average and maximum number of tickets bought in all visits?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1;", "query": "What is the total ticket expense of the visitors whose membership level is 1?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011;", "query": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010);", "query": "Find the number of visitors who did not visit any museum opened after 2010.", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;", "query": "How many museums were opened after 2013 or before 2008?", "schema": "CREATE TABLE museum (Museum_ID INT, Name TEXT, Num_of_Staff INT, Open_Year TEXT);\nCREATE TABLE visitor (ID INT, Name TEXT, Level_of_membership INT, Age INT);\nCREATE TABLE visit (Museum_ID INT, visitor_ID TEXT, Num_of_Ticket INT, Total_spent INT);\n"}
{"output": "SELECT count(*) FROM players;", "query": "Find the total number of players.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) FROM players;", "query": "How many players are there?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) FROM matches;", "query": "Find the total number of matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) FROM matches;", "query": "Count the number of matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA';", "query": "List the first name and birth date of all players from the country with code USA.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA';", "query": "What are the first names and birth dates of players from the USA?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;", "query": "Find the average age of losers and winners of all matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;", "query": "What are the average ages of losers and winners across matches?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT avg(winner_rank) FROM matches;", "query": "Find the average rank of winners in all matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT avg(winner_rank) FROM matches;", "query": "What is the average rank for winners in all matches?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT min(loser_rank) FROM matches;", "query": "Find the highest rank of losers in all matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT min(loser_rank) FROM matches;", "query": "What is the best rank of losers across all matches?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(DISTINCT country_code) FROM players;", "query": "find the number of distinct country codes of all players.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(DISTINCT country_code) FROM players;", "query": "How many distinct countries do players come from?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(DISTINCT loser_name) FROM matches;", "query": "Find the number of distinct name of losers.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(DISTINCT loser_name) FROM matches;", "query": "How many different loser names are there?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;", "query": "Find the name of tourney that has more than 10 matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;", "query": "What are the names of tournaments that have more than 10 matches?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;", "query": "List the names of all winners who played in both 2013 and 2016.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;", "query": "What are the names of players who won in both 2013 and 2016?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;", "query": "List the number of all matches who played in years of 2013 or 2016.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;", "query": "How many matches were played in 2013 or 2016?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open';", "query": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open';", "query": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;", "query": "Find the first name and country code of the oldest player.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;", "query": "What is the first name and country code of the oldest player?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;", "query": "List the first and last name of all players in the order of birth date.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;", "query": "What are the full names of all players, sorted by birth date?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;", "query": "List the first and last name of all players who are left / L hand in the order of birth date.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;", "query": "What are the full names of all left handed players, in order of birth date?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;", "query": "Find the first name and country code of the player who did the most number of tours.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;", "query": "What is the first name and country code of the player with the most tours?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "query": "Find the year that has the most number of matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "query": "Which year had the most matches?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;", "query": "Find the name and rank points of the winner who won the most times.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;", "query": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "query": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "query": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;", "query": "find the names of loser and winner who played in the match with greatest number of minutes.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;", "query": "What are the names of the winner and loser who played in the longest match?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "query": "Find the average ranking for each player and their first name.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "query": "What are the first names of all players, and their average rankings?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "query": "Find the total ranking points for each player and their first name.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "query": "What are the first names of all players, and their total ranking points?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;", "query": "find the number of players for each country.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;", "query": "How many players are from each country?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;", "query": "find the code of the country where has the greatest number of players.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;", "query": "What is the code of the country with the most players?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;", "query": "Find the codes of countries that have more than 50 players.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;", "query": "What are the codes of countries with more than 50 players?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;", "query": "Find the total number of tours for each ranking date.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;", "query": "How many total tours were there for each ranking date?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;", "query": "Find the number of matches happened in each year.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;", "query": "How many matches were played in each year?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;", "query": "Find the name and rank of the 3 youngest winners across all matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;", "query": "What are the names and ranks of the three youngest winners across all matches?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L';", "query": "How many different winners both participated in the WTA Championships and were left handed?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L';", "query": "Find the number of left handed winners who participated in the WTA Championships.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;", "query": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;", "query": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) ,  hand FROM players GROUP BY hand;", "query": "Find the number of players for each hand type.", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) ,  hand FROM players GROUP BY hand;", "query": "How many players are there for each hand type?", "schema": "CREATE TABLE players (player_id INT, first_name TEXT, last_name TEXT, hand TEXT, birth_date TEXT, country_code TEXT);\nCREATE TABLE matches (best_of INT, draw_size INT, loser_age INT, loser_entry TEXT, loser_hand TEXT, loser_ht INT, loser_id INT, loser_ioc TEXT, loser_name TEXT, loser_rank INT, loser_rank_points INT, loser_seed INT, match_num INT, minutes INT, round TEXT, score TEXT, surface TEXT, tourney_date TEXT, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INT, winner_entry TEXT, winner_hand TEXT, winner_ht INT, winner_id INT, winner_ioc TEXT, winner_name TEXT, winner_rank INT, winner_rank_points INT, winner_seed INT, year INT);\nCREATE TABLE rankings (ranking_date TEXT, ranking INT, player_id INT, ranking_points INT, tours INT);\n"}
{"output": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured';", "query": "How many ships ended up being 'Captured'?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT name ,  tonnage FROM ship ORDER BY name DESC;", "query": "List the name and tonnage ordered by in descending alphaetical order for the names.", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT name ,  date FROM battle;", "query": "List the name, date and result of each battle.", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT max(killed) ,  min(killed) FROM death;", "query": "What is maximum and minimum death toll caused each time?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT avg(injured) FROM death;", "query": "What is the average number of injuries caused each time?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't';", "query": "What are the death and injury situations caused by the ship with tonnage 't'?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril';", "query": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig';", "query": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10;", "query": "What are the ids and names of the battles that led to more than 10 people killed in total.", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the ship id and name that caused most total injuries?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I';", "query": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT count(DISTINCT RESULT) FROM battle;", "query": "How many different results are there for the battles?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "query": "How many battles did not lose any ship with tonnage '225'?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta';", "query": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel';", "query": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT note FROM death WHERE note LIKE '%East%';", "query": "What are the notes of the death events which has substring 'East'?", "schema": "CREATE TABLE battle (id INT, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);\nCREATE TABLE ship (lost_in_battle INT, id INT, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT);\nCREATE TABLE death (caused_by_ship_id INT, id INT, note TEXT, killed INT, injured INT);\n"}
{"output": "SELECT line_1 ,  line_2 FROM addresses;", "query": "what are all the addresses including line 1 and line 2?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT line_1 ,  line_2 FROM addresses;", "query": "What is the first and second line for all addresses?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) FROM Courses;", "query": "How many courses in total are listed?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) FROM Courses;", "query": "How many courses are there?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT course_description FROM Courses WHERE course_name  =  'math';", "query": "How is the math course described?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT course_description FROM Courses WHERE course_name  =  'math';", "query": "What are the descriptions for all the math courses?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea';", "query": "What is the zip code of the address in the city Port Chelsea?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea';", "query": "What is the zip code for Port Chelsea?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;", "query": "Which department offers the most number of degrees? List department name and id.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1;", "query": "What is the name and id of the department with the most number of degrees?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(DISTINCT department_id) FROM Degree_Programs;", "query": "How many departments offer any degree?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(DISTINCT department_id) FROM Degree_Programs;", "query": "How many different departments offer degrees?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;", "query": "How many different degree names are offered?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;", "query": "How many different degrees are offered?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer';", "query": "How many degrees does the engineering department offer?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer';", "query": "How many degrees does the engineering department have?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT section_name ,  section_description FROM Sections;", "query": "What are the names and descriptions of all the sections?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT section_name ,  section_description FROM Sections;", "query": "What are the names and descriptions for all the sections?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;", "query": "What are the names and id of courses having at most 2 sections?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;", "query": "What are the names and ids of every course with less than 2 sections?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "query": "List the section_name in reversed lexicographical order.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "query": "What are the names of the sections in reverse alphabetical order?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the semester which most student registered in? Show both the name and the id.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;", "query": "For each semester, what is the name and id of the one with the most students registered?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "query": "What is the description of the department whose name has the substring the computer?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "query": "What is the department description for the one whose name has the word computer?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;", "query": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;", "query": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';", "query": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';", "query": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;", "query": "Find the kind of program which most number of students are enrolled in?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;", "query": "What is the degree summary name that has the most number of students enrolled?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;", "query": "Find the program which most number of students are enrolled in. List both the id and the summary.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the program id and the summary of the degree that has the most students enrolled?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "query": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );", "query": "Which semesters do not have any student enrolled? List the semester name.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );", "query": "What is the name of the semester with no students enrolled?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;", "query": "What are all the course names of the courses which ever have students enrolled in?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;", "query": "What are the names of all courses that have some students enrolled?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;", "query": "What's the name of the course with most number of enrollments?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;", "query": "What is the name of the course with the most students enrolled?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;", "query": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;", "query": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;", "query": "Show the date and id of the transcript with at least 2 course results.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;", "query": "What is the date and id of the transcript with at least 2 courses listed?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward';", "query": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward';", "query": "What is the mobile phone number of the student named Timmothy Ward?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "query": "Who is the first student to register? List the first name, middle name and last name.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "query": "What is the first, middle, and last name of the first student to register?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;", "query": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;", "query": "What is the first, middle, and last name of the earliest school graduate?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;", "query": "Whose permanent address is different from his or her current address? List his or her first name.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;", "query": "What is the first name of the student whose permanent address is different from his or her current one?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;", "query": "Which address holds the most number of students currently? List the address id and all lines.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the id, line 1, and line 2 of the address with the most students?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT avg(transcript_date) FROM Transcripts;", "query": "On average, when were the transcripts printed?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT avg(transcript_date) FROM Transcripts;", "query": "What is the average transcript date?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;", "query": "When is the first transcript released? List the date and details.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;", "query": "What is the earliest date of a transcript release, and what details can you tell me?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) FROM Transcripts;", "query": "How many transcripts are released?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) FROM Transcripts;", "query": "How many transcripts are listed?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;", "query": "What is the last transcript release date?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;", "query": "When was the last transcript released?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;", "query": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;", "query": "Show the date of the transcript which shows the least number of results, also list the id.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;", "query": "What is the date and id of the transcript with the least number of results?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor';", "query": "Find the semester when both Master students and Bachelor students got enrolled in.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor';", "query": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(DISTINCT current_address_id) FROM Students;", "query": "How many different addresses do the students currently live?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT count(DISTINCT current_address_id) FROM Students;", "query": "What are the different addresses that have students living there?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;", "query": "List all the student details in reversed lexicographical order.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;", "query": "What other details can you tell me about students in reverse alphabetical order?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT section_description FROM Sections WHERE section_name  =  'h';", "query": "Describe the section h.", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT section_description FROM Sections WHERE section_name  =  'h';", "query": "What is the description for the section named h?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';", "query": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';", "query": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?", "schema": "CREATE TABLE Addresses (address_id INT, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);\nCREATE TABLE Courses (course_id INT, course_name TEXT, course_description TEXT, other_details TEXT);\nCREATE TABLE Departments (department_id INT, department_name TEXT, department_description TEXT, other_details TEXT);\nCREATE TABLE Degree_Programs (degree_program_id INT, department_id INT, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT);\nCREATE TABLE Sections (section_id INT, course_id INT, section_name TEXT, section_description TEXT, other_details TEXT);\nCREATE TABLE Semesters (semester_id INT, semester_name TEXT, semester_description TEXT, other_details TEXT);\nCREATE TABLE Students (student_id INT, current_address_id INT, permanent_address_id INT, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TEXT, date_left TEXT, other_student_details TEXT);\nCREATE TABLE Student_Enrolment (student_enrolment_id INT, degree_program_id INT, semester_id INT, student_id INT, other_details TEXT);\nCREATE TABLE Student_Enrolment_Courses (student_course_id INT, course_id INT, student_enrolment_id INT);\nCREATE TABLE Transcripts (transcript_id INT, transcript_date TEXT, other_details TEXT);\nCREATE TABLE Transcript_Contents (student_course_id INT, transcript_id INT);\n"}
{"output": "SELECT Title FROM Cartoon ORDER BY title;", "query": "List the title of all cartoons in alphabetical order.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Title FROM Cartoon ORDER BY title;", "query": "What are the titles of the cartoons sorted alphabetically?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query": "List all cartoon directed by \"Ben Jones\".", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query": "What are the names of all cartoons directed by Ben Jones?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query": "How many cartoons were written by \"Joseph Kuhr\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query": "What is the number of cartoones written by Joseph Kuhr?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;", "query": "list all cartoon titles and their directors ordered by their air date", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;", "query": "What is the name and directors of all the cartoons that are ordered by air date?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query": "What is the country with the most number of TV Channels and how many does it have?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "query": "List the number of different series names and contents in the TV Channel table.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "query": "How many different series and contents are listed in the TV Channel table?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query": "What is the content of TV Channel with serial name \"Sky Radio\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query": "What is the content of the series Sky Radio?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query": "How many TV Channel using language English?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query": "How many TV Channels use the English language?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "query": "List the language used least number of TV Channel. List language and number of TV Channel.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "query": "What are the languages used by the least number of TV Channels and how many channels use it?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;", "query": "List each language and the number of TV Channels using it.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;", "query": "For each language, list the number of TV Channels that use it.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Episode FROM TV_series ORDER BY rating;", "query": "List the Episode of all TV series sorted by rating.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Episode FROM TV_series ORDER BY rating;", "query": "What are all of the episodes ordered by ratings?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "query": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "query": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "query": "What is minimum and maximum share of TV series?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "query": "What is the maximum and minimum share for the TV series?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query": "When did the episode \"A Love of a Lifetime\" air?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query": "What is the episode for the TV series named \"Sky Radio\"?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;", "query": "Find the number of cartoons directed by each of the listed directors.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;", "query": "How many cartoons did each director create?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;", "query": "Find the production code and channel of the most recently aired cartoon .", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;", "query": "What is the produdction code and channel of the most recent cartoon?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";", "query": "Find the package choice and series name of the TV channel that has high definition TV.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";", "query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "query": "which countries' tv channels are playing some cartoon written by Todd Casey?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "query": "What are the countries that have cartoons on TV that were written by Todd Casey?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "query": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "query": "What are the countries that are not playing cartoons written by Todd Casey?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones';", "query": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones';", "query": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English';", "query": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English';", "query": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;", "query": "find id of the tv channels that from the countries where have more than two tv channels.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;", "query": "What are the ids of all tv channels that have more than 2 TV channels?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones';", "query": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones';", "query": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones');", "query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones');", "query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "schema": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT);\nCREATE TABLE TV_series (id INT, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INT, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INT, Channel TEXT);\nCREATE TABLE Cartoon (id INT, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INT, Channel TEXT);\n"}
{"output": "SELECT count(*) FROM poker_player;", "query": "How many poker players are there?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT count(*) FROM poker_player;", "query": "Count the number of poker players.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "query": "List the earnings of poker players in descending order.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "query": "What are the earnings of poker players, ordered descending by value?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;", "query": "List the final tables made and the best finishes of poker players.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;", "query": "What are the final tables made and best finishes for all poker players?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT avg(Earnings) FROM poker_player;", "query": "What is the average earnings of poker players?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT avg(Earnings) FROM poker_player;", "query": "Return the average earnings across all poker players.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;", "query": "What is the money rank of the poker player with the highest earnings?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;", "query": "Return the money rank of the player with the greatest earnings.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;", "query": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;", "query": "Return the maximum final tables made across all poker players who have earnings below 200000.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;", "query": "What are the names of poker players?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;", "query": "Return the names of all the poker players.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;", "query": "What are the names of poker players whose earnings is higher than 300000?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;", "query": "Give the names of poker players who have earnings above 300000.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;", "query": "List the names of poker players ordered by the final tables made in ascending order.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;", "query": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;", "query": "What is the birth date of the poker player with the lowest earnings?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;", "query": "Return the birth date of the poker player with the lowest earnings.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;", "query": "What is the money rank of the tallest poker player?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;", "query": "Return the money rank of the poker player with the greatest height.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;", "query": "What is the average earnings of poker players with height higher than 200?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;", "query": "Give average earnings of poker players who are taller than 200.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;", "query": "What are the names of poker players in descending order of earnings?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;", "query": "Return the names of poker players sorted by their earnings descending.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;", "query": "What are different nationalities of people and the corresponding number of people from each nation?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;", "query": "How many people are there of each nationality?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;", "query": "What is the most common nationality of people?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;", "query": "Give the nationality that is most common across all people.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;", "query": "What are the nationalities that are shared by at least two people?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;", "query": "Return the nationalities for which there are two or more people.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;", "query": "List the names and birth dates of people in ascending alphabetical order of name.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;", "query": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Name FROM people WHERE Nationality != \"Russia\";", "query": "Show names of people whose nationality is not \"Russia\".", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Name FROM people WHERE Nationality != \"Russia\";", "query": "What are the names of people who are not from Russia?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "query": "List the names of people that are not poker players.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "query": "What are the names of people who do not play poker?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT count(DISTINCT Nationality) FROM people;", "query": "How many distinct nationalities are there?", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT count(DISTINCT Nationality) FROM people;", "query": "Count the number of different nationalities.", "schema": "CREATE TABLE poker_player (Poker_Player_ID INT, People_ID INT, Final_Table_Made INT, Best_Finish INT, Money_Rank INT, Earnings INT);\nCREATE TABLE people (People_ID INT, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INT);\n"}
{"output": "SELECT count(*) FROM area_code_state;", "query": "How many states are there?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC;", "query": "List the contestant numbers and names, ordered by contestant name descending.", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT vote_id ,  phone_number ,  state FROM votes;", "query": "List the vote ids, phone numbers and states of all votes.", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT max(area_code) ,  min(area_code) FROM area_code_state;", "query": "What are the maximum and minimum values of area codes?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT max(created) FROM votes WHERE state  =  'CA';", "query": "What is last date created of votes from the state 'CA'?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';", "query": "What are the names of the contestants whose names are not 'Jessie Alloway'", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT DISTINCT state ,  created FROM votes;", "query": "What are the distinct states and create time of all votes?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2;", "query": "What are the contestant numbers and names of the contestants who had at least two votes?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1;", "query": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA';", "query": "What are the number of votes from state 'NY' or 'CA'?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes );", "query": "How many contestants did not get voted?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1;", "query": "What is the area code in which the most voters voted?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling';", "query": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss';", "query": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "select contestant_name from contestants where contestant_name like \"%al%\";", "query": "Return the names of the contestants whose names contain the substring 'Al' .", "schema": "CREATE TABLE AREA_CODE_STATE (area_code INT, state TEXT);\nCREATE TABLE CONTESTANTS (contestant_number INT, contestant_name TEXT);\nCREATE TABLE VOTES (vote_id INT, phone_number INT, state TEXT, contestant_number INT, created TEXT);\n"}
{"output": "SELECT Name FROM country WHERE IndepYear  >  1950;", "query": "What are the names of all the countries that became independent after 1950?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE IndepYear  >  1950;", "query": "Give the names of the nations that were founded after 1950.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\";", "query": "How many countries have a republic as their form of government?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\";", "query": "How many countries have governments that are republics?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\";", "query": "What is the total surface area of the countries in the Caribbean region?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\";", "query": "How much surface area do the countires in the Carribean cover together?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\";", "query": "Which continent is Anguilla in?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\";", "query": "What is the continent name which Anguilla belongs to?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\";", "query": "Which region is the city Kabul located in?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\";", "query": "What region is Kabul in?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1;", "query": "Which language is the most popular in Aruba?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1;", "query": "What language is predominantly spoken in Aruba?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\";", "query": "What are the population and life expectancies in Brazil?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\";", "query": "Give me Brazil\u2019s population and life expectancies.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\";", "query": "What are the region and population of Angola?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\";", "query": "What region does Angola belong to and what is its population?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\";", "query": "What is the average expected life expectancy for countries in the region of Central Africa?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\";", "query": "How long is the people\u2019s average life expectancy in Central Africa?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1;", "query": "What is the name of country that has the shortest life expectancy in Asia?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1;", "query": "Give the name of the country in Asia with the lowest life expectancy.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\";", "query": "What is the total population and maximum GNP in Asia?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\";", "query": "How many people live in Asia, and what is the largest GNP among them?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\";", "query": "What is the average life expectancy in African countries that are republics?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\";", "query": "Give the average life expectancy for countries in Africa which are republics?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\";", "query": "What is the total surface area of the continents Asia and Europe?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\";", "query": "Give the total surface area covered by countries in Asia or Europe.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\";", "query": "How many people live in Gelderland district?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\";", "query": "What is the total population of Gelderland district?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\";", "query": "What is the average GNP and total population in all nations whose government is US territory?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\";", "query": "Give the mean GNP and total population of nations which are considered US territory.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;", "query": "How many unique languages are spoken in the world?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;", "query": "What is the number of distinct languages used around the world?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\";", "query": "How many type of governments are in Africa?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\";", "query": "How many different forms of governments are there in Africa?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\";", "query": "What is the total number of languages used in Aruba?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\";", "query": "How many languages are spoken in Aruba?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\";", "query": "How many official languages does Afghanistan have?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\";", "query": "How many official languages are spoken in Afghanistan?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;", "query": "What is name of the country that speaks the largest number of languages?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;", "query": "Give the name of the nation that uses the greatest amount of languages.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;", "query": "Which continent has the most diverse languages?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;", "query": "Which continent speaks the most languages?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\");", "query": "How many countries speak both English and Dutch?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\");", "query": "What is the number of nations that use English and Dutch?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\";", "query": "What are the names of nations speak both English and French?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\";", "query": "Give the names of nations that speak both English and French.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\";", "query": "What are the names of nations where both English and French are official languages?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\";", "query": "Give the names of countries with English and French as official languages.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\";", "query": "What is the number of distinct continents where Chinese is spoken?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\";", "query": "How many continents speak Chinese?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\";", "query": "What are the regions that use English or Dutch?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\";", "query": "Which regions speak Dutch or English?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\";", "query": "What are the countries where either English or Dutch is the official language?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\";", "query": "Which countries have either English or Dutch as an official language?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;", "query": "Which language is the most popular on the Asian continent?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;", "query": "What is the language that is used by the largest number of Asian nations?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1;", "query": "Which languages are spoken by only one country in republic governments?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1;", "query": "What languages are only used by a single country with a republic government?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1;", "query": "Find the city with the largest population that uses English.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1;", "query": "What is the most populace city that speaks English?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;", "query": "Find the name, population and expected life length of asian country with the largest area?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;", "query": "What are the name, population, and life expectancy of the largest Asian country by land?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\");", "query": "What is average life expectancy in the countries where English is not the official language?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\");", "query": "Give the mean life expectancy of countries in which English is not the official language.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\");", "query": "What is the total number of people living in the nations that do not use English?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\");", "query": "How many people live in countries that do not speak English?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\";", "query": "What is the official language spoken in the country whose head of state is Beatrix?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\";", "query": "What is the official language used in the country the name of whose head of state is Beatrix.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";", "query": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";", "query": "For the countries founded before 1930, what is the total number of distinct official languages?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\");", "query": "What are the countries that have greater surface area than any country in Europe?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\");", "query": "Which countries have greater area than that of any country in Europe?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\");", "query": "What are the African countries that have a  population less than any country in Asia?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\");", "query": "Which African countries have a smaller population than that of any country in Asia?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\");", "query": "Which Asian countries have a population that is larger than any country in Africa?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\");", "query": "What are the Asian countries which have a population larger than that of any country in Africa?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "query": "What are the country codes for countries that do not speak English?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "query": "Return the country codes for countries that do not speak English.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";", "query": "What are the country codes of countries where people use languages other than English?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";", "query": "Give the country codes for countries in which people speak langauges that are not English.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "query": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "query": "Return the codes of countries that do not speak English and do not have Republics for governments.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English');", "query": "Which cities are in European countries where English is not the official language?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English');", "query": "What are the names of cities in Europe for which English is not the official language?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\";", "query": "Which unique cities are in Asian countries where Chinese is the official language?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\";", "query": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;", "query": "What are the name, independence year, and surface area of the country with the smallest population?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;", "query": "Give the name, year of independence, and surface area of the country that has the lowest population.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;", "query": "What are the population, name and leader of the country with the largest area?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;", "query": "Give the name, population, and head of state for the country that has the largest area.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;", "query": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;", "query": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;", "query": "Find the number of cities in each district whose population is greater than the average population of cities?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;", "query": "How many cities in each district have a population that is above the average population across all cities?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;", "query": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;", "query": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;", "query": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;", "query": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;", "query": "What are the names and areas of countries with the top 5 largest area?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;", "query": "Return the names and surface areas of the 5 largest countries.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "query": "What are names of countries with the top 3 largest population?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "query": "Return the names of the 3 most populated countries.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "query": "What are the names of the nations with the 3 lowest populations?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "query": "Return the names of the 3 countries with the fewest people.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) FROM country WHERE continent  =  \"Asia\";", "query": "how many countries are in Asia?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) FROM country WHERE continent  =  \"Asia\";", "query": "Count the number of countries in Asia.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\";", "query": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\";", "query": "Give the names of countries that are in Europe and have a population equal to 80000.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;", "query": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;", "query": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000;", "query": "What are the cities whose population is between 160000 and 900000?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "select name from city where population between 160000 and 900000;", "query": "Return the names of cities that have a population between 160000 and 900000 .", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;", "query": "Which language is spoken by the largest number of countries?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;", "query": "Give the language that is spoken in the most countries.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;", "query": "What is the language spoken by the largest percentage of people in each country?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;", "query": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "query": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "query": "Count the number of countries for which Spanish is the predominantly spoken language.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "query": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "query": "Return the codes of countries for which Spanish is the predominantly spoken language.", "schema": "CREATE TABLE city (ID INT, Name TEXT, CountryCode TEXT, District TEXT, Population INT);\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INT, IndepYear INT, Population INT, LifeExpectancy INT, GNP INT, GNPOld INT, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INT, Code2 TEXT);\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INT);\n"}
{"output": "SELECT count(*) FROM conductor;", "query": "How many conductors are there?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT count(*) FROM conductor;", "query": "Count the number of conductors.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor ORDER BY Age ASC;", "query": "List the names of conductors in ascending order of age.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor ORDER BY Age ASC;", "query": "What are the names of conductors, ordered by age?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "query": "What are the names of conductors whose nationalities are not \"USA\"?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "query": "Return the names of conductors that do not have the nationality \"USA\".", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "query": "What are the record companies of orchestras in descending order of years in which they were founded?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "query": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT avg(Attendance) FROM SHOW;", "query": "What is the average attendance of shows?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT avg(Attendance) FROM SHOW;", "query": "Return the average attendance across all shows.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\";", "query": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\";", "query": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT count(DISTINCT Nationality) FROM conductor;", "query": "How many different nationalities do conductors have?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT count(DISTINCT Nationality) FROM conductor;", "query": "Count the number of different nationalities of conductors.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;", "query": "List names of conductors in descending order of years of work.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;", "query": "What are the names of conductors, sorted descending by the number of years they have worked?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;", "query": "List the name of the conductor with the most years of work.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;", "query": "What is the name of the conductor who has worked the greatest number of years?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;", "query": "Show the names of conductors and the orchestras they have conducted.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;", "query": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;", "query": "Show the names of conductors that have conducted more than one orchestras.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;", "query": "What are the names of conductors who have conducted at more than one orchestra?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;", "query": "Show the name of the conductor that has conducted the most number of orchestras.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;", "query": "What is the name of the conductor who has conducted the most orchestras?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;", "query": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;", "query": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;", "query": "Please show the different record companies and the corresponding number of orchestras.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;", "query": "How many orchestras does each record company manage?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;", "query": "Please show the record formats of orchestras in ascending order of count.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;", "query": "What are the major record formats of orchestras, sorted by their frequency?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;", "query": "List the record company shared by the most number of orchestras.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;", "query": "What is the record company used by the greatest number of orchestras?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "query": "List the names of orchestras that have no performance.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "query": "What are the orchestras that do not have any performances?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;", "query": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;", "query": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";", "query": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";", "query": "Count the number of orchestras that have CD or DVD as their record format.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;", "query": "Show the years in which orchestras that have given more than one performance are founded.", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;", "query": "What are years of founding for orchestras that have had more than a single performance?", "schema": "CREATE TABLE conductor (Conductor_ID INT, Name TEXT, Age INT, Nationality TEXT, Year_of_Work INT);\nCREATE TABLE orchestra (Orchestra_ID INT, Orchestra TEXT, Conductor_ID INT, Record_Company TEXT, Year_of_Founded INT, Major_Record_Format TEXT);\nCREATE TABLE performance (Performance_ID INT, Orchestra_ID INT, Type TEXT, Date TEXT, Official_ratings_(millions) INT, Weekly_rank TEXT, Share TEXT);\nCREATE TABLE show (Show_ID INT, Performance_ID INT, If_first_show TEXT, Result TEXT, Attendance INT);\n"}
{"output": "SELECT count(*) FROM Highschooler;", "query": "How many high schoolers are there?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT count(*) FROM Highschooler;", "query": "Count the number of high schoolers.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT name ,  grade FROM Highschooler;", "query": "Show the names and grades of each high schooler.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT name ,  grade FROM Highschooler;", "query": "What are the names and grades for each high schooler?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler;", "query": "Show all the grades of the high schoolers.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler;", "query": "What is the grade of each high schooler?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";", "query": "What grade is Kyle in?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";", "query": "Return the grade for the high schooler named Kyle.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT name FROM Highschooler WHERE grade  =  10;", "query": "Show the names of all high schoolers in grade 10.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT name FROM Highschooler WHERE grade  =  10;", "query": "What are the names of all high schoolers in grade 10?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\";", "query": "Show the ID of the high schooler named Kyle.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\";", "query": "What is Kyle's id?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;", "query": "How many high schoolers are there in grade 9 or 10?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;", "query": "Count the number of high schoolers in grades 9 or 10.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;", "query": "Show the number of high schoolers for each grade.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;", "query": "How many high schoolers are in each grade?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;", "query": "Which grade has the most high schoolers?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;", "query": "Return the grade that has the greatest number of high schoolers.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;", "query": "Show me all grades that have at least 4 students.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;", "query": "Which grades have 4 or more high schoolers?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;", "query": "Show the student IDs and numbers of friends corresponding to each.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;", "query": "How many friends does each student have?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "query": "Show the names of high school students and their corresponding number of friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "query": "What are the names of the high schoolers and how many friends does each have?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the name of the high schooler who has the greatest number of friends?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "query": "Return the name of the high school student with the most friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;", "query": "Show the names of high schoolers who have at least 3 friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;", "query": "What are the names of high schoolers who have 3 or more friends?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\";", "query": "Show the names of all of the high schooler Kyle's friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\";", "query": "Return the names of friends of the high school student Kyle.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "query": "How many friends does the high school student Kyle have?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "query": "Count the number of friends Kyle has.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;", "query": "Show ids of all students who do not have any friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;", "query": "What are the ids of high school students who do not have friends?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;", "query": "Show names of all high school students who do not have any friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;", "query": "What are the names of students who have no friends?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;", "query": "Show the ids of high schoolers who have friends and are also liked by someone else.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;", "query": "What are the ids of students who both have friends and are liked?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;", "query": "Show name of all students who have some friends and also are liked by someone else.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;", "query": "What are the names of high schoolers who both have friends and are liked?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;", "query": "Count the number of likes for each student id.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;", "query": "How many likes correspond to each student id?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "query": "Show the names of high schoolers who have likes, and numbers of likes for each.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "query": "What are the names of high schoolers who have likes, and how many likes does each have?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "query": "What is the name of the high schooler who has the greatest number of likes?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "query": "Give the name of the student with the most likes.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;", "query": "Show the names of students who have at least 2 likes.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;", "query": "What are the names of students who have 2 or more likes?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;", "query": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;", "query": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "query": "How many likes does Kyle have?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "query": "Return the number of likes that the high schooler named Kyle has.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "query": "Find the average grade of all students who have some friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "query": "What is the average grade of students who have friends?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "query": "Find the minimum grade of students who have no friends.", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "query": "What is the lowest grade of students who do not have any friends?", "schema": "CREATE TABLE Highschooler (ID INT, name TEXT, grade INT);\nCREATE TABLE Friend (student_id INT, friend_id INT);\nCREATE TABLE Likes (student_id INT, liked_id INT);\n"}
{"output": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;", "query": "Which states have both owners and professionals living there?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;", "query": "Find the states where both owners and professionals live.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );", "query": "What is the average age of the dogs who have gone through any treatments?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );", "query": "Find the average age of the dogs who went through treatments.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;", "query": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;", "query": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );", "query": "Which dogs have not cost their owner more than 1000 for treatment? List the dog names .", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );", "query": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;", "query": "Which first names are used for professionals or owners but are not used as dog names?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;", "query": "Find the first names that are used for professionals or owners but are not used as dog names.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;", "query": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;", "query": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "query": "Which owner owns the most dogs? List the owner id, first name and last name.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "query": "Return the owner id, first name and last name of the owner who has the most dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "query": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "query": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;", "query": "What is the name of the breed with the most dogs?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;", "query": "Which breed do the most dogs have? Give me the breed name.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "query": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "query": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;", "query": "What is the description of the treatment type that costs the least money in total?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;", "query": "Give me the description of the treatment type whose total cost is the lowest.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;", "query": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;", "query": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "query": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "query": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );", "query": "What are the first name and last name of the professionals who have done treatment with cost below average?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );", "query": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;", "query": "List the date of each treatment, together with the first name of the professional who operated it.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;", "query": "What are the date and the operating professional's first name of each treatment?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;", "query": "List the cost of each treatment and the corresponding treatment type description.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;", "query": "What are the cost and treatment type description of each treatment?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "query": "List each owner's first name, last name, and the size of his for her dog.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "query": "What are each owner's first name, last name, and the size of their dog?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "query": "List pairs of the owner's first name and the dogs's name.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "query": "What are each owner's first name and their dogs's name?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );", "query": "List the names of the dogs of the rarest breed and the treatment dates of them.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );", "query": "Which dogs are of the rarest breed? Show their names and treatment dates.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia';", "query": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia';", "query": "Find the first names of owners living in Virginia and the names of dogs they own.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;", "query": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;", "query": "Find the arriving date and the departing date of the dogs that received a treatment.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );", "query": "List the last name of the owner owning the youngest dog.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );", "query": "Who owns the youngest dog? Give me his or her last name.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';", "query": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';", "query": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT date_arrived ,  date_departed FROM Dogs;", "query": "What are the arriving date and the departing date of all the dogs?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT date_arrived ,  date_departed FROM Dogs;", "query": "List the arrival date and the departure date for all the dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(DISTINCT dog_id) FROM Treatments;", "query": "How many dogs went through any treatments?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(DISTINCT dog_id) FROM Treatments;", "query": "Count the number of dogs that went through a treatment.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(DISTINCT professional_id) FROM Treatments;", "query": "How many professionals have performed any treatment to dogs?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(DISTINCT professional_id) FROM Treatments;", "query": "Find the number of professionals who have ever treated dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%';", "query": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%';", "query": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%';", "query": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%';", "query": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );", "query": "How many dogs have an age below the average?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );", "query": "Count the number of dogs of an age below the average.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "query": "How much does the most recent treatment cost?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "query": "Show me the cost of the most recently performed treatment.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments );", "query": "How many dogs have not gone through any treatment?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "select count(*) from dogs where dog_id not in ( select dog_id from treatments );", "query": "Tell me the number of dogs that have not received any treatment .", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );", "query": "How many owners temporarily do not have any dogs?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );", "query": "Find the number of owners who do not own any dogs at this moment.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );", "query": "How many professionals did not operate any treatment on dogs?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );", "query": "Find the number of professionals who have not treated any dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;", "query": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;", "query": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT avg(age) FROM Dogs;", "query": "What is the average age of all the dogs?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT avg(age) FROM Dogs;", "query": "Compute the average age of all the dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT max(age) FROM Dogs;", "query": "What is the age of the oldest dog?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT max(age) FROM Dogs;", "query": "Tell me the age of the oldest dog.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT charge_type ,  charge_amount FROM Charges;", "query": "How much does each charge type costs? List both charge type and amount.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT charge_type ,  charge_amount FROM Charges;", "query": "List each charge type and its amount.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT max(charge_amount) FROM Charges;", "query": "How much does the most expensive charge type costs?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT max(charge_amount) FROM Charges;", "query": "What is the charge amount of the most expensive charge type?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;", "query": "List the email, cell phone and home phone of all the professionals.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;", "query": "What are the email, cell phone and home phone of each professional?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT breed_code ,  size_code FROM dogs;", "query": "What are all the possible breed type and size type combinations?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT breed_code ,  size_code FROM dogs;", "query": "Find the distinct breed type and size type combinations for dogs.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;", "query": "List the first name of all the professionals along with the description of the treatment they have done.", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;", "query": "What are each professional's first name and description of the treatment they have performed?", "schema": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT);\nCREATE TABLE Charges (charge_id INT, charge_type TEXT, charge_amount INT);\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT);\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT);\nCREATE TABLE Owners (owner_id INT, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Dogs (dog_id INT, owner_id INT, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TEXT, gender TEXT, weight TEXT, date_arrived TEXT, date_adopted TEXT, date_departed TEXT);\nCREATE TABLE Professionals (professional_id INT, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);\nCREATE TABLE Treatments (treatment_id INT, dog_id INT, professional_id INT, treatment_type_code TEXT, date_of_treatment TEXT, cost_of_treatment INT);\n"}
{"output": "SELECT count(*) FROM singer;", "query": "How many singers are there?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT count(*) FROM singer;", "query": "What is the count of singers?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "query": "List the name of singers in ascending order of net worth.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "query": "What are the names of singers ordered by ascending net worth?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Birth_Year ,  Citizenship FROM singer;", "query": "What are the birth year and citizenship of singers?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Birth_Year ,  Citizenship FROM singer;", "query": "What are the birth years and citizenships of the singers?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer WHERE Citizenship != \"France\";", "query": "List the name of singers whose citizenship is not \"France\".", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer WHERE Citizenship != \"France\";", "query": "What are the names of the singers who are not French citizens?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;", "query": "Show the name of singers whose birth year is either 1948 or 1949?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;", "query": "What are the names of the singers whose birth years are either 1948 or 1949?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "query": "What is the name of the singer with the largest net worth?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "query": "What is the name of the singer who is worth the most?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;", "query": "Show different citizenship of singers and the number of singers of each citizenship.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;", "query": "For each citizenship, how many singers are from that country?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;", "query": "Please show the most common citizenship of singers.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "select citizenship from singer group by citizenship order by count(*) desc limit 1;", "query": "What is the most common singer citizenship?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;", "query": "Show different citizenships and the maximum net worth of singers of each citizenship.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;", "query": "For each citizenship, what is the maximum net worth?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;", "query": "Show titles of songs and names of singers.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;", "query": "What are the song titles and singer names?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;", "query": "Show distinct names of singers that have songs with sales more than 300000.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;", "query": "what are the different names of the singers that have sales more than 300000?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;", "query": "Show the names of singers that have more than one song.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;", "query": "What are the names of the singers that have more than one songs?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;", "query": "Show the names of singers and the total sales of their songs.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;", "query": "For each singer name, what is the total sales for their songs?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "query": "List the name of singers that do not have any song.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "query": "What is the sname of every sing that does not have any song?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;", "query": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;", "query": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "schema": "CREATE TABLE singer (Singer_ID INT, Name TEXT, Birth_Year INT, Net_Worth_Millions INT, Citizenship TEXT);\nCREATE TABLE song (Song_ID INT, Title TEXT, Singer_ID INT, Sales INT, Highest_Position INT);\n"}
{"output": "SELECT count(*) FROM Other_Available_Features;", "query": "How many available features are there in total?", "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT);\nCREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT);\nCREATE TABLE Other_Available_Features (feature_id INT, feature_type_code TEXT, feature_name TEXT, feature_description TEXT);\nCREATE TABLE Properties (property_id INT, property_type_code TEXT, date_on_market TEXT, date_sold TEXT, property_name TEXT, property_address TEXT, room_count INT, vendor_requested_price INT, buyer_offered_price INT, agreed_selling_price INT, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT);\nCREATE TABLE Other_Property_Features (property_id INT, feature_id INT, property_feature_description TEXT);\n"}
{"output": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\";", "query": "What is the feature type name of feature AirCon?", "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT);\nCREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT);\nCREATE TABLE Other_Available_Features (feature_id INT, feature_type_code TEXT, feature_name TEXT, feature_description TEXT);\nCREATE TABLE Properties (property_id INT, property_type_code TEXT, date_on_market TEXT, date_sold TEXT, property_name TEXT, property_address TEXT, room_count INT, vendor_requested_price INT, buyer_offered_price INT, agreed_selling_price INT, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT);\nCREATE TABLE Other_Property_Features (property_id INT, feature_id INT, property_feature_description TEXT);\n"}
{"output": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code;", "query": "Show the property type descriptions of properties belonging to that code.", "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT);\nCREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT);\nCREATE TABLE Other_Available_Features (feature_id INT, feature_type_code TEXT, feature_name TEXT, feature_description TEXT);\nCREATE TABLE Properties (property_id INT, property_type_code TEXT, date_on_market TEXT, date_sold TEXT, property_name TEXT, property_address TEXT, room_count INT, vendor_requested_price INT, buyer_offered_price INT, agreed_selling_price INT, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT);\nCREATE TABLE Other_Property_Features (property_id INT, feature_id INT, property_feature_description TEXT);\n"}
{"output": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1;", "query": "What are the names of properties that are either houses or apartments with more than 1 room?", "schema": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT);\nCREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT);\nCREATE TABLE Other_Available_Features (feature_id INT, feature_type_code TEXT, feature_name TEXT, feature_description TEXT);\nCREATE TABLE Properties (property_id INT, property_type_code TEXT, date_on_market TEXT, date_sold TEXT, property_name TEXT, property_address TEXT, room_count INT, vendor_requested_price INT, buyer_offered_price INT, agreed_selling_price INT, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT);\nCREATE TABLE Other_Property_Features (property_id INT, feature_id INT, property_feature_description TEXT);\n"}
